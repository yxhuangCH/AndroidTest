apply plugin: 'jacoco'

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

ext {
    getFileFilter = { ->
        def jacocoSkipClasses = null
        if (project.hasProperty('jacocoSkipClasses')) {
            jacocoSkipClasses = project.property('jacocoSkipClasses')
        }
        //忽略类文件配置
        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*$ViewInjector*.*']
        if (jacocoSkipClasses != null) {
            fileFilter.addAll(jacocoSkipClasses)
        }
        return fileFilter
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testCoverageDebugUnitTest', 'createCoverageDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml {
            enabled = true
            xml.destination file("build/reports/jacoco/jacoco.xml")
        }
        html {
            enabled = true
            html.destination file("build/reports/jacoco")
        }
    }

    def fileFilter = project.getFileFilter()
    //检测覆盖率的class所在目录(以项目class所在目录为准)
    //gradle2.3 class所在目录
    def coverageDebugTree = fileTree(dir: "$project.buildDir/intermediates/classes/coverageDebug", excludes: fileFilter)
    //gradle3.2 class所在目录
    def coverageDebugTreeNewGradle = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    //设置需要检测覆盖率的目录
    sourceDirectories = files([mainSrc])
    //兼容gradle版本
    classDirectories = files([coverageDebugTree, coverageDebugTreeNewGradle])
    //以下路径也需要检查
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testCoverageDebugUnitTest.exec', 'outputs/code-coverage/debugAndroidTest/connected/coverage.ec'
    ])
}
